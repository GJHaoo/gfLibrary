package gen

import (
	"strings"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gcmd"
	"github.com/gogf/gf/os/gfile"
	"github.com/gogf/gf/text/gstr"
	"github.com/iWinston/gf-cli/library/mlog"
)

const header = `
// ==========================================================================
// Code generated by QiKe CLI tool. DO NOT EDIT.
// ==========================================================================
`

const onlyOnceHeader = `
// =================================================================================
// This is auto-generated by QiKe CLI tool only once. Fill this file as you wish.
// =================================================================================
`

func genFile(template string, folder string, fileName string, name string, description string, systemName string) {
	fileName = snakeString(fileName)
	if err := gfile.Mkdir(folder); err != nil {
		mlog.Fatalf("mkdir for generating path '%s' failed: %v", folder, err)
	}
	path := gfile.Join(folder, fileName)

	if gcmd.ContainsOpt("f") || !gfile.Exists(path) {
		indexContent := gstr.ReplaceByMap(onlyOnceHeader+template, g.MapStrStr{
			"{TplName}":        name,
			"{TplUpperName}":   strings.ToUpper(name[:1]) + name[1:],
			"{TplDescription}": description,
			"{TplSystemName}":  systemName,
		})
		if err := gfile.PutContents(path, strings.TrimSpace(indexContent)); err != nil {
			mlog.Fatalf("writing content to '%s' failed: %v", path, err)
		} else {
			mlog.Print("generated:", path)
		}
	}
}

func genFileForce(template string, folder string, fileName string, name string, description string, systemName string) {
	fileName = snakeString(fileName)
	if err := gfile.Mkdir(folder); err != nil {
		mlog.Fatalf("mkdir for generating path '%s' failed: %v", folder, err)
	}
	path := gfile.Join(folder, fileName)
	indexContent := gstr.ReplaceByMap(header+template, g.MapStrStr{
		"{TplName}":        name,
		"{TplUpperName}":   strings.ToUpper(name[:1]) + name[1:],
		"{TplDescription}": description,
		"{TplSystemName}":  systemName,
	})
	if err := gfile.PutContents(path, strings.TrimSpace(indexContent)); err != nil {
		mlog.Fatalf("writing content to '%s' failed: %v", path, err)
	} else {
		mlog.Print("generated:", path)
	}

}

func getArgs() (name string, description string, systemName string) {
	name = gcmd.GetArg(3)
	if name == "" {
		mlog.Fatalf("Command arguments are not enough")
	}
	description = gcmd.GetArg(4)

	if description == "" {
		mlog.Fatalf(`Command arguments are not enough, The description argument is needed`)
	}

	parser, err := gcmd.Parse(g.MapStrBool{
		"s,systemName": true,
	})
	if err != nil {
		mlog.Fatal(err)
	}
	systemName = parser.GetOpt("systemName")
	if systemName == "" {
		systemName = "admin"
	}
	return
}

/**
 * 驼峰转蛇形 snake string
 * @description XxYy to xx_yy , XxYY to xx_y_y
 * @date 2020/7/30
 * @param s 需要转换的字符串
 * @return string
 **/
func snakeString(s string) string {
	data := make([]byte, 0, len(s)*2)
	j := false
	num := len(s)
	for i := 0; i < num; i++ {
		d := s[i]
		// or通过ASCII码进行大小写的转化
		// 65-90（A-Z），97-122（a-z）
		//判断如果字母为大写的A-Z就在前面拼接一个_
		if i > 0 && d >= 'A' && d <= 'Z' && j {
			data = append(data, '_')
		}
		if d != '_' {
			j = true
		}
		data = append(data, d)
	}
	//ToLower把大写字母统一转小写
	return strings.ToLower(string(data[:]))
}

/**
 * 蛇形转驼峰
 * @description xx_yy to XxYx  xx_y_y to XxYY
 * @date 2020/7/30
 * @param s要转换的字符串
 * @return string
 **/
func camelString(s string) string {
	data := make([]byte, 0, len(s))
	j := false
	k := false
	num := len(s) - 1
	for i := 0; i <= num; i++ {
		d := s[i]
		if k == false && d >= 'A' && d <= 'Z' {
			k = true
		}
		if d >= 'a' && d <= 'z' && (j || k == false) {
			d = d - 32
			j = false
			k = true
		}
		if k && d == '_' && num > i && s[i+1] >= 'a' && s[i+1] <= 'z' {
			j = true
			continue
		}
		data = append(data, d)
	}
	return string(data[:])
}
